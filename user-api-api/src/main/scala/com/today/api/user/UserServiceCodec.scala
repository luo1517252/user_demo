package com.today.api.user
        import com.today.api.user.request.serializer._;import com.today.api.user.response.serializer._;

        import com.isuwang.dapeng.core._
        import com.isuwang.org.apache.thrift._
        import com.isuwang.org.apache.thrift.protocol._

        /**
        * Autogenerated by Dapeng-Code-Generator (1.2.2)
        *
        * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
        *  @generated
        **/
        object UserServiceCodec {

        
            case class registerUser_args(request:com.today.api.user.request.RegisterUserRequest)

            case class registerUser_result(success:com.today.api.user.response.RegisterUserResponse)

            class RegisterUser_argsSerializer extends TCommonBeanSerializer[registerUser_args]{
            
      @throws[TException]
      override def read(iprot: TProtocol): registerUser_args = {

        var schemeField: com.isuwang.org.apache.thrift.protocol.TField = null
        iprot.readStructBegin()

      var request: com.today.api.user.request.RegisterUserRequest = null
        

      while (schemeField == null || schemeField.`type` != com.isuwang.org.apache.thrift.protocol.TType.STOP) {

        schemeField = iprot.readFieldBegin

        schemeField.id match {
          
              case 1 =>
                  schemeField.`type` match {
                    case com.isuwang.org.apache.thrift.protocol.TType.STRUCT => request = new com.today.api.user.request.serializer.RegisterUserRequestSerializer().read(iprot)
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
            }
            
          case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
        }
      }

      iprot.readFieldEnd
      iprot.readStructEnd

      val bean = registerUser_args(request = request)
      validate(bean)

      bean
      }
    
      @throws[TException]
      override def write(bean: registerUser_args, oprot: TProtocol): Unit = {

      validate(bean)
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("registerUser_args"))

      
            {
            val elem0 = bean.request 
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("request", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, 1.asInstanceOf[Short]))
             new com.today.api.user.request.serializer.RegisterUserRequestSerializer().write(elem0, oprot)
            oprot.writeFieldEnd
            
            }
      oprot.writeFieldStop
      oprot.writeStructEnd
    }
    
      @throws[TException]
      override def validate(bean: registerUser_args): Unit = {
      
              if(bean.request == null)
              throw new SoaException(SoaBaseCode.NotNull, "request字段不允许为空")
            
                if(bean.request != null)
                new com.today.api.user.request.serializer.RegisterUserRequestSerializer().validate(bean.request)
              
    }
    

            override def toString(bean: registerUser_args): String = if(bean == null)  "null" else bean.toString
            }

            class RegisterUser_resultSerializer extends TCommonBeanSerializer[registerUser_result]{

            @throws[TException]
            override def read(iprot: TProtocol): registerUser_result = {

              var schemeField: com.isuwang.org.apache.thrift.protocol.TField = null
              iprot.readStructBegin

              var success : com.today.api.user.response.RegisterUserResponse = null

              while (schemeField == null || schemeField.`type` != com.isuwang.org.apache.thrift.protocol.TType.STOP) {

                schemeField = iprot.readFieldBegin

                schemeField.id match {
                    case 0 =>
                       schemeField.`type` match {
                          case com.isuwang.org.apache.thrift.protocol.TType.STRUCT =>  success = new com.today.api.user.response.serializer.RegisterUserResponseSerializer().read(iprot)
                          case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
                  }
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
                }

                iprot.readFieldEnd
              }

              iprot.readStructEnd
              val bean = registerUser_result(success)
              validate(bean)

              bean
            }

            
      @throws[TException]
      override def write(bean: registerUser_result, oprot: TProtocol): Unit = {

      validate(bean)
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("registerUser_result"))

      
            {
            val elem0 = bean.success 
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("success", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, 0.asInstanceOf[Short]))
             new com.today.api.user.response.serializer.RegisterUserResponseSerializer().write(elem0, oprot)
            oprot.writeFieldEnd
            
            }
      oprot.writeFieldStop
      oprot.writeStructEnd
    }
    
            
      @throws[TException]
      override def validate(bean: registerUser_result): Unit = {
      
              if(bean.success == null)
              throw new SoaException(SoaBaseCode.NotNull, "success字段不允许为空")
            
                if(bean.success != null)
                new com.today.api.user.response.serializer.RegisterUserResponseSerializer().validate(bean.success)
              
    }
    

            override def toString(bean: registerUser_result): String = if(bean == null)  "null" else bean.toString
          }

            class registerUser extends SoaProcessFunction[com.today.api.user.service.UserService, registerUser_args, registerUser_result, RegisterUser_argsSerializer,  RegisterUser_resultSerializer]("registerUser", new RegisterUser_argsSerializer(), new RegisterUser_resultSerializer()){

            override def isOneway: Boolean = false

            override def getEmptyArgsInstance: registerUser_args = null


            @throws[TException]
            def getResult(iface: com.today.api.user.service.UserService, args: registerUser_args):registerUser_result = {

              val _result = iface.registerUser(args.request)
              registerUser_result(_result )
            }
          }
          
            case class login_args(request:com.today.api.user.request.LoginUserRequest)

            case class login_result(success:com.today.api.user.response.LoginUserResponse)

            class Login_argsSerializer extends TCommonBeanSerializer[login_args]{
            
      @throws[TException]
      override def read(iprot: TProtocol): login_args = {

        var schemeField: com.isuwang.org.apache.thrift.protocol.TField = null
        iprot.readStructBegin()

      var request: com.today.api.user.request.LoginUserRequest = null
        

      while (schemeField == null || schemeField.`type` != com.isuwang.org.apache.thrift.protocol.TType.STOP) {

        schemeField = iprot.readFieldBegin

        schemeField.id match {
          
              case 1 =>
                  schemeField.`type` match {
                    case com.isuwang.org.apache.thrift.protocol.TType.STRUCT => request = new com.today.api.user.request.serializer.LoginUserRequestSerializer().read(iprot)
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
            }
            
          case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
        }
      }

      iprot.readFieldEnd
      iprot.readStructEnd

      val bean = login_args(request = request)
      validate(bean)

      bean
      }
    
      @throws[TException]
      override def write(bean: login_args, oprot: TProtocol): Unit = {

      validate(bean)
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("login_args"))

      
            {
            val elem0 = bean.request 
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("request", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, 1.asInstanceOf[Short]))
             new com.today.api.user.request.serializer.LoginUserRequestSerializer().write(elem0, oprot)
            oprot.writeFieldEnd
            
            }
      oprot.writeFieldStop
      oprot.writeStructEnd
    }
    
      @throws[TException]
      override def validate(bean: login_args): Unit = {
      
              if(bean.request == null)
              throw new SoaException(SoaBaseCode.NotNull, "request字段不允许为空")
            
                if(bean.request != null)
                new com.today.api.user.request.serializer.LoginUserRequestSerializer().validate(bean.request)
              
    }
    

            override def toString(bean: login_args): String = if(bean == null)  "null" else bean.toString
            }

            class Login_resultSerializer extends TCommonBeanSerializer[login_result]{

            @throws[TException]
            override def read(iprot: TProtocol): login_result = {

              var schemeField: com.isuwang.org.apache.thrift.protocol.TField = null
              iprot.readStructBegin

              var success : com.today.api.user.response.LoginUserResponse = null

              while (schemeField == null || schemeField.`type` != com.isuwang.org.apache.thrift.protocol.TType.STOP) {

                schemeField = iprot.readFieldBegin

                schemeField.id match {
                    case 0 =>
                       schemeField.`type` match {
                          case com.isuwang.org.apache.thrift.protocol.TType.STRUCT =>  success = new com.today.api.user.response.serializer.LoginUserResponseSerializer().read(iprot)
                          case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
                  }
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
                }

                iprot.readFieldEnd
              }

              iprot.readStructEnd
              val bean = login_result(success)
              validate(bean)

              bean
            }

            
      @throws[TException]
      override def write(bean: login_result, oprot: TProtocol): Unit = {

      validate(bean)
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("login_result"))

      
            {
            val elem0 = bean.success 
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("success", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, 0.asInstanceOf[Short]))
             new com.today.api.user.response.serializer.LoginUserResponseSerializer().write(elem0, oprot)
            oprot.writeFieldEnd
            
            }
      oprot.writeFieldStop
      oprot.writeStructEnd
    }
    
            
      @throws[TException]
      override def validate(bean: login_result): Unit = {
      
              if(bean.success == null)
              throw new SoaException(SoaBaseCode.NotNull, "success字段不允许为空")
            
                if(bean.success != null)
                new com.today.api.user.response.serializer.LoginUserResponseSerializer().validate(bean.success)
              
    }
    

            override def toString(bean: login_result): String = if(bean == null)  "null" else bean.toString
          }

            class login extends SoaProcessFunction[com.today.api.user.service.UserService, login_args, login_result, Login_argsSerializer,  Login_resultSerializer]("login", new Login_argsSerializer(), new Login_resultSerializer()){

            override def isOneway: Boolean = false

            override def getEmptyArgsInstance: login_args = null


            @throws[TException]
            def getResult(iface: com.today.api.user.service.UserService, args: login_args):login_result = {

              val _result = iface.login(args.request)
              login_result(_result )
            }
          }
          
            case class modifyUser_args(request:com.today.api.user.request.ModifyUserRequest)

            case class modifyUser_result(success:com.today.api.user.response.ModifyUserResponse)

            class ModifyUser_argsSerializer extends TCommonBeanSerializer[modifyUser_args]{
            
      @throws[TException]
      override def read(iprot: TProtocol): modifyUser_args = {

        var schemeField: com.isuwang.org.apache.thrift.protocol.TField = null
        iprot.readStructBegin()

      var request: com.today.api.user.request.ModifyUserRequest = null
        

      while (schemeField == null || schemeField.`type` != com.isuwang.org.apache.thrift.protocol.TType.STOP) {

        schemeField = iprot.readFieldBegin

        schemeField.id match {
          
              case 1 =>
                  schemeField.`type` match {
                    case com.isuwang.org.apache.thrift.protocol.TType.STRUCT => request = new com.today.api.user.request.serializer.ModifyUserRequestSerializer().read(iprot)
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
            }
            
          case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
        }
      }

      iprot.readFieldEnd
      iprot.readStructEnd

      val bean = modifyUser_args(request = request)
      validate(bean)

      bean
      }
    
      @throws[TException]
      override def write(bean: modifyUser_args, oprot: TProtocol): Unit = {

      validate(bean)
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("modifyUser_args"))

      
            {
            val elem0 = bean.request 
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("request", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, 1.asInstanceOf[Short]))
             new com.today.api.user.request.serializer.ModifyUserRequestSerializer().write(elem0, oprot)
            oprot.writeFieldEnd
            
            }
      oprot.writeFieldStop
      oprot.writeStructEnd
    }
    
      @throws[TException]
      override def validate(bean: modifyUser_args): Unit = {
      
              if(bean.request == null)
              throw new SoaException(SoaBaseCode.NotNull, "request字段不允许为空")
            
                if(bean.request != null)
                new com.today.api.user.request.serializer.ModifyUserRequestSerializer().validate(bean.request)
              
    }
    

            override def toString(bean: modifyUser_args): String = if(bean == null)  "null" else bean.toString
            }

            class ModifyUser_resultSerializer extends TCommonBeanSerializer[modifyUser_result]{

            @throws[TException]
            override def read(iprot: TProtocol): modifyUser_result = {

              var schemeField: com.isuwang.org.apache.thrift.protocol.TField = null
              iprot.readStructBegin

              var success : com.today.api.user.response.ModifyUserResponse = null

              while (schemeField == null || schemeField.`type` != com.isuwang.org.apache.thrift.protocol.TType.STOP) {

                schemeField = iprot.readFieldBegin

                schemeField.id match {
                    case 0 =>
                       schemeField.`type` match {
                          case com.isuwang.org.apache.thrift.protocol.TType.STRUCT =>  success = new com.today.api.user.response.serializer.ModifyUserResponseSerializer().read(iprot)
                          case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
                  }
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
                }

                iprot.readFieldEnd
              }

              iprot.readStructEnd
              val bean = modifyUser_result(success)
              validate(bean)

              bean
            }

            
      @throws[TException]
      override def write(bean: modifyUser_result, oprot: TProtocol): Unit = {

      validate(bean)
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("modifyUser_result"))

      
            {
            val elem0 = bean.success 
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("success", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, 0.asInstanceOf[Short]))
             new com.today.api.user.response.serializer.ModifyUserResponseSerializer().write(elem0, oprot)
            oprot.writeFieldEnd
            
            }
      oprot.writeFieldStop
      oprot.writeStructEnd
    }
    
            
      @throws[TException]
      override def validate(bean: modifyUser_result): Unit = {
      
              if(bean.success == null)
              throw new SoaException(SoaBaseCode.NotNull, "success字段不允许为空")
            
                if(bean.success != null)
                new com.today.api.user.response.serializer.ModifyUserResponseSerializer().validate(bean.success)
              
    }
    

            override def toString(bean: modifyUser_result): String = if(bean == null)  "null" else bean.toString
          }

            class modifyUser extends SoaProcessFunction[com.today.api.user.service.UserService, modifyUser_args, modifyUser_result, ModifyUser_argsSerializer,  ModifyUser_resultSerializer]("modifyUser", new ModifyUser_argsSerializer(), new ModifyUser_resultSerializer()){

            override def isOneway: Boolean = false

            override def getEmptyArgsInstance: modifyUser_args = null


            @throws[TException]
            def getResult(iface: com.today.api.user.service.UserService, args: modifyUser_args):modifyUser_result = {

              val _result = iface.modifyUser(args.request)
              modifyUser_result(_result )
            }
          }
          
            case class freezeUser_args(request:com.today.api.user.request.FreezeUserRequest)

            case class freezeUser_result(success:com.today.api.user.response.FreezeUserResponse)

            class FreezeUser_argsSerializer extends TCommonBeanSerializer[freezeUser_args]{
            
      @throws[TException]
      override def read(iprot: TProtocol): freezeUser_args = {

        var schemeField: com.isuwang.org.apache.thrift.protocol.TField = null
        iprot.readStructBegin()

      var request: com.today.api.user.request.FreezeUserRequest = null
        

      while (schemeField == null || schemeField.`type` != com.isuwang.org.apache.thrift.protocol.TType.STOP) {

        schemeField = iprot.readFieldBegin

        schemeField.id match {
          
              case 1 =>
                  schemeField.`type` match {
                    case com.isuwang.org.apache.thrift.protocol.TType.STRUCT => request = new com.today.api.user.request.serializer.FreezeUserRequestSerializer().read(iprot)
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
            }
            
          case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
        }
      }

      iprot.readFieldEnd
      iprot.readStructEnd

      val bean = freezeUser_args(request = request)
      validate(bean)

      bean
      }
    
      @throws[TException]
      override def write(bean: freezeUser_args, oprot: TProtocol): Unit = {

      validate(bean)
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("freezeUser_args"))

      
            {
            val elem0 = bean.request 
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("request", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, 1.asInstanceOf[Short]))
             new com.today.api.user.request.serializer.FreezeUserRequestSerializer().write(elem0, oprot)
            oprot.writeFieldEnd
            
            }
      oprot.writeFieldStop
      oprot.writeStructEnd
    }
    
      @throws[TException]
      override def validate(bean: freezeUser_args): Unit = {
      
              if(bean.request == null)
              throw new SoaException(SoaBaseCode.NotNull, "request字段不允许为空")
            
                if(bean.request != null)
                new com.today.api.user.request.serializer.FreezeUserRequestSerializer().validate(bean.request)
              
    }
    

            override def toString(bean: freezeUser_args): String = if(bean == null)  "null" else bean.toString
            }

            class FreezeUser_resultSerializer extends TCommonBeanSerializer[freezeUser_result]{

            @throws[TException]
            override def read(iprot: TProtocol): freezeUser_result = {

              var schemeField: com.isuwang.org.apache.thrift.protocol.TField = null
              iprot.readStructBegin

              var success : com.today.api.user.response.FreezeUserResponse = null

              while (schemeField == null || schemeField.`type` != com.isuwang.org.apache.thrift.protocol.TType.STOP) {

                schemeField = iprot.readFieldBegin

                schemeField.id match {
                    case 0 =>
                       schemeField.`type` match {
                          case com.isuwang.org.apache.thrift.protocol.TType.STRUCT =>  success = new com.today.api.user.response.serializer.FreezeUserResponseSerializer().read(iprot)
                          case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
                  }
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
                }

                iprot.readFieldEnd
              }

              iprot.readStructEnd
              val bean = freezeUser_result(success)
              validate(bean)

              bean
            }

            
      @throws[TException]
      override def write(bean: freezeUser_result, oprot: TProtocol): Unit = {

      validate(bean)
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("freezeUser_result"))

      
            {
            val elem0 = bean.success 
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("success", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, 0.asInstanceOf[Short]))
             new com.today.api.user.response.serializer.FreezeUserResponseSerializer().write(elem0, oprot)
            oprot.writeFieldEnd
            
            }
      oprot.writeFieldStop
      oprot.writeStructEnd
    }
    
            
      @throws[TException]
      override def validate(bean: freezeUser_result): Unit = {
      
              if(bean.success == null)
              throw new SoaException(SoaBaseCode.NotNull, "success字段不允许为空")
            
                if(bean.success != null)
                new com.today.api.user.response.serializer.FreezeUserResponseSerializer().validate(bean.success)
              
    }
    

            override def toString(bean: freezeUser_result): String = if(bean == null)  "null" else bean.toString
          }

            class freezeUser extends SoaProcessFunction[com.today.api.user.service.UserService, freezeUser_args, freezeUser_result, FreezeUser_argsSerializer,  FreezeUser_resultSerializer]("freezeUser", new FreezeUser_argsSerializer(), new FreezeUser_resultSerializer()){

            override def isOneway: Boolean = false

            override def getEmptyArgsInstance: freezeUser_args = null


            @throws[TException]
            def getResult(iface: com.today.api.user.service.UserService, args: freezeUser_args):freezeUser_result = {

              val _result = iface.freezeUser(args.request)
              freezeUser_result(_result )
            }
          }
          
            case class blackUser_args(request:com.today.api.user.request.BlackUserRequest)

            case class blackUser_result(success:com.today.api.user.response.BlackUserResponse)

            class BlackUser_argsSerializer extends TCommonBeanSerializer[blackUser_args]{
            
      @throws[TException]
      override def read(iprot: TProtocol): blackUser_args = {

        var schemeField: com.isuwang.org.apache.thrift.protocol.TField = null
        iprot.readStructBegin()

      var request: com.today.api.user.request.BlackUserRequest = null
        

      while (schemeField == null || schemeField.`type` != com.isuwang.org.apache.thrift.protocol.TType.STOP) {

        schemeField = iprot.readFieldBegin

        schemeField.id match {
          
              case 1 =>
                  schemeField.`type` match {
                    case com.isuwang.org.apache.thrift.protocol.TType.STRUCT => request = new com.today.api.user.request.serializer.BlackUserRequestSerializer().read(iprot)
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
            }
            
          case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
        }
      }

      iprot.readFieldEnd
      iprot.readStructEnd

      val bean = blackUser_args(request = request)
      validate(bean)

      bean
      }
    
      @throws[TException]
      override def write(bean: blackUser_args, oprot: TProtocol): Unit = {

      validate(bean)
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("blackUser_args"))

      
            {
            val elem0 = bean.request 
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("request", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, 1.asInstanceOf[Short]))
             new com.today.api.user.request.serializer.BlackUserRequestSerializer().write(elem0, oprot)
            oprot.writeFieldEnd
            
            }
      oprot.writeFieldStop
      oprot.writeStructEnd
    }
    
      @throws[TException]
      override def validate(bean: blackUser_args): Unit = {
      
              if(bean.request == null)
              throw new SoaException(SoaBaseCode.NotNull, "request字段不允许为空")
            
                if(bean.request != null)
                new com.today.api.user.request.serializer.BlackUserRequestSerializer().validate(bean.request)
              
    }
    

            override def toString(bean: blackUser_args): String = if(bean == null)  "null" else bean.toString
            }

            class BlackUser_resultSerializer extends TCommonBeanSerializer[blackUser_result]{

            @throws[TException]
            override def read(iprot: TProtocol): blackUser_result = {

              var schemeField: com.isuwang.org.apache.thrift.protocol.TField = null
              iprot.readStructBegin

              var success : com.today.api.user.response.BlackUserResponse = null

              while (schemeField == null || schemeField.`type` != com.isuwang.org.apache.thrift.protocol.TType.STOP) {

                schemeField = iprot.readFieldBegin

                schemeField.id match {
                    case 0 =>
                       schemeField.`type` match {
                          case com.isuwang.org.apache.thrift.protocol.TType.STRUCT =>  success = new com.today.api.user.response.serializer.BlackUserResponseSerializer().read(iprot)
                          case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
                  }
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
                }

                iprot.readFieldEnd
              }

              iprot.readStructEnd
              val bean = blackUser_result(success)
              validate(bean)

              bean
            }

            
      @throws[TException]
      override def write(bean: blackUser_result, oprot: TProtocol): Unit = {

      validate(bean)
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("blackUser_result"))

      
            {
            val elem0 = bean.success 
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("success", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, 0.asInstanceOf[Short]))
             new com.today.api.user.response.serializer.BlackUserResponseSerializer().write(elem0, oprot)
            oprot.writeFieldEnd
            
            }
      oprot.writeFieldStop
      oprot.writeStructEnd
    }
    
            
      @throws[TException]
      override def validate(bean: blackUser_result): Unit = {
      
              if(bean.success == null)
              throw new SoaException(SoaBaseCode.NotNull, "success字段不允许为空")
            
                if(bean.success != null)
                new com.today.api.user.response.serializer.BlackUserResponseSerializer().validate(bean.success)
              
    }
    

            override def toString(bean: blackUser_result): String = if(bean == null)  "null" else bean.toString
          }

            class blackUser extends SoaProcessFunction[com.today.api.user.service.UserService, blackUser_args, blackUser_result, BlackUser_argsSerializer,  BlackUser_resultSerializer]("blackUser", new BlackUser_argsSerializer(), new BlackUser_resultSerializer()){

            override def isOneway: Boolean = false

            override def getEmptyArgsInstance: blackUser_args = null


            @throws[TException]
            def getResult(iface: com.today.api.user.service.UserService, args: blackUser_args):blackUser_result = {

              val _result = iface.blackUser(args.request)
              blackUser_result(_result )
            }
          }
          
            case class changeUserIntegral_args(request:com.today.api.user.request.ChangeIntegralRequest)

            case class changeUserIntegral_result(success:Int)

            class ChangeUserIntegral_argsSerializer extends TCommonBeanSerializer[changeUserIntegral_args]{
            
      @throws[TException]
      override def read(iprot: TProtocol): changeUserIntegral_args = {

        var schemeField: com.isuwang.org.apache.thrift.protocol.TField = null
        iprot.readStructBegin()

      var request: com.today.api.user.request.ChangeIntegralRequest = null
        

      while (schemeField == null || schemeField.`type` != com.isuwang.org.apache.thrift.protocol.TType.STOP) {

        schemeField = iprot.readFieldBegin

        schemeField.id match {
          
              case 1 =>
                  schemeField.`type` match {
                    case com.isuwang.org.apache.thrift.protocol.TType.STRUCT => request = new com.today.api.user.request.serializer.ChangeIntegralRequestSerializer().read(iprot)
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
            }
            
          case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
        }
      }

      iprot.readFieldEnd
      iprot.readStructEnd

      val bean = changeUserIntegral_args(request = request)
      validate(bean)

      bean
      }
    
      @throws[TException]
      override def write(bean: changeUserIntegral_args, oprot: TProtocol): Unit = {

      validate(bean)
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("changeUserIntegral_args"))

      
            {
            val elem0 = bean.request 
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("request", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, 1.asInstanceOf[Short]))
             new com.today.api.user.request.serializer.ChangeIntegralRequestSerializer().write(elem0, oprot)
            oprot.writeFieldEnd
            
            }
      oprot.writeFieldStop
      oprot.writeStructEnd
    }
    
      @throws[TException]
      override def validate(bean: changeUserIntegral_args): Unit = {
      
              if(bean.request == null)
              throw new SoaException(SoaBaseCode.NotNull, "request字段不允许为空")
            
                if(bean.request != null)
                new com.today.api.user.request.serializer.ChangeIntegralRequestSerializer().validate(bean.request)
              
    }
    

            override def toString(bean: changeUserIntegral_args): String = if(bean == null)  "null" else bean.toString
            }

            class ChangeUserIntegral_resultSerializer extends TCommonBeanSerializer[changeUserIntegral_result]{

            @throws[TException]
            override def read(iprot: TProtocol): changeUserIntegral_result = {

              var schemeField: com.isuwang.org.apache.thrift.protocol.TField = null
              iprot.readStructBegin

              var success : Int = 0

              while (schemeField == null || schemeField.`type` != com.isuwang.org.apache.thrift.protocol.TType.STOP) {

                schemeField = iprot.readFieldBegin

                schemeField.id match {
                    case 0 =>
                       schemeField.`type` match {
                          case com.isuwang.org.apache.thrift.protocol.TType.I32 =>  success = iprot.readI32
                          case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
                  }
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
                }

                iprot.readFieldEnd
              }

              iprot.readStructEnd
              val bean = changeUserIntegral_result(success)
              validate(bean)

              bean
            }

            
      @throws[TException]
      override def write(bean: changeUserIntegral_result, oprot: TProtocol): Unit = {

      validate(bean)
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("changeUserIntegral_result"))

      
            {
            val elem0 = bean.success 
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("success", com.isuwang.org.apache.thrift.protocol.TType.I32, 0.asInstanceOf[Short]))
            oprot.writeI32(elem0)
            oprot.writeFieldEnd
            
            }
      oprot.writeFieldStop
      oprot.writeStructEnd
    }
    
            
      @throws[TException]
      override def validate(bean: changeUserIntegral_result): Unit = {
      
    }
    

            override def toString(bean: changeUserIntegral_result): String = if(bean == null)  "null" else bean.toString
          }

            class changeUserIntegral extends SoaProcessFunction[com.today.api.user.service.UserService, changeUserIntegral_args, changeUserIntegral_result, ChangeUserIntegral_argsSerializer,  ChangeUserIntegral_resultSerializer]("changeUserIntegral", new ChangeUserIntegral_argsSerializer(), new ChangeUserIntegral_resultSerializer()){

            override def isOneway: Boolean = false

            override def getEmptyArgsInstance: changeUserIntegral_args = null


            @throws[TException]
            def getResult(iface: com.today.api.user.service.UserService, args: changeUserIntegral_args):changeUserIntegral_result = {

              val _result = iface.changeUserIntegral(args.request)
              changeUserIntegral_result(_result )
            }
          }
          

        case class getServiceMetadata_args()

        case class getServiceMetadata_result(success: String)

        class GetServiceMetadata_argsSerializer extends TCommonBeanSerializer[getServiceMetadata_args] {

          @throws[TException]
          override def read(iprot: TProtocol): getServiceMetadata_args = {

            iprot.readStructBegin

            var schemeField: com.isuwang.org.apache.thrift.protocol.TField = null

            while (schemeField == null || schemeField.`type` != com.isuwang.org.apache.thrift.protocol.TType.STOP) {
              schemeField = iprot.readFieldBegin
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
              iprot.readFieldEnd
            }

            iprot.readStructEnd

            val bean = getServiceMetadata_args()
            validate(bean)

            bean
          }

          @throws[TException]
          override def write(bean: getServiceMetadata_args, oproto: TProtocol): Unit = {
            validate(bean)
            oproto.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("getServiceMetadata_args"))

            oproto.writeFieldStop
            oproto.writeStructEnd
          }

          @throws[TException]
          override def validate(bean: getServiceMetadata_args): Unit = {}

          override def toString(bean: getServiceMetadata_args): String = if (bean == null) "null" else bean.toString
        }



        class GetServiceMetadata_resultSerializer extends TCommonBeanSerializer[getServiceMetadata_result] {
          @throws[TException]
          override def read(iprot: TProtocol): getServiceMetadata_result = {
            iprot.readStructBegin

            var schemeField: com.isuwang.org.apache.thrift.protocol.TField = null

            var success: String = null

            while (schemeField == null || schemeField.`type` != com.isuwang.org.apache.thrift.protocol.TType.STOP) {
              schemeField = iprot.readFieldBegin

              schemeField.id match {
                case 0 =>
                schemeField.`type` match {
                  case com.isuwang.org.apache.thrift.protocol.TType.STRING => success = iprot.readString
                  case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
                }
                case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
              }
              iprot.readFieldEnd
            }

            iprot.readStructEnd
            val bean = getServiceMetadata_result(success)
            validate(bean)

            bean
          }

          @throws[TException]
          override def write(bean: getServiceMetadata_result, oproto: TProtocol): Unit = {
            validate(bean)
            oproto.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("getServiceMetadata_result"))

            oproto.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("success", com.isuwang.org.apache.thrift.protocol.TType.STRING, 0.asInstanceOf[Short]))
            oproto.writeString(bean.success)
            oproto.writeFieldEnd

            oproto.writeFieldStop
            oproto.writeStructEnd
          }

          @throws[TException]
          override def validate(bean: getServiceMetadata_result): Unit = {
            if (bean.success == null)
            throw new SoaException(SoaBaseCode.NotNull, "success字段不允许为空")
          }

          override def toString(bean: getServiceMetadata_result): String = if (bean == null) "null" else bean.toString

        }



  class getServiceMetadata extends SoaProcessFunction[com.today.api.user.service.UserService, getServiceMetadata_args, getServiceMetadata_result, GetServiceMetadata_argsSerializer, GetServiceMetadata_resultSerializer](
  "getServiceMetadata", new GetServiceMetadata_argsSerializer(), new GetServiceMetadata_resultSerializer()) {

      override def isOneway: Boolean = false

      override def getEmptyArgsInstance: getServiceMetadata_args = getServiceMetadata_args()

      @throws[TException]
      override def getResult(iface: com.today.api.user.service.UserService, args: getServiceMetadata_args): getServiceMetadata_result = {

        val source = scala.io.Source.fromInputStream(UserServiceCodec.getClass.getClassLoader.getResourceAsStream("com.today.api.user.service.UserService.xml"))
        val success = source.mkString
        source.close
        getServiceMetadata_result(success)
      }
      }

      class Processor(iface: com.today.api.user.service.UserService) extends SoaCommonBaseProcessor(iface, Processor.getProcessMap)

        object Processor{

          type PF = SoaProcessFunction[com.today.api.user.service.UserService, _, _, _ <: TCommonBeanSerializer[_], _ <: TCommonBeanSerializer[_]]

          def getProcessMap(): java.util.Map[String, PF] = {
             val map = new java.util.HashMap[String, PF]()
            map.put("registerUser", new registerUser)
              map.put("login", new login)
              map.put("modifyUser", new modifyUser)
              map.put("freezeUser", new freezeUser)
              map.put("blackUser", new blackUser)
              map.put("changeUserIntegral", new changeUserIntegral)
              
            map.put("getServiceMetadata", new getServiceMetadata)
            map
          }

        }
        }
      